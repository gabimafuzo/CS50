sort1 uses: bubble sort

How do you know?: It performed best in the best-case scenario, when the list was already sorted. ( On^2 / Ωn)

sort2 uses: merge sort

How do you know?: It was the fastest in the worst-case scenario (reversed). (O nlogn / Ω nlogn )

sort3 uses: selection sort

How do you know?: It performed worse in most cases, being more or less equal in the best and worst scenarios ( On^2 / Ωn^2 ).


///random5000.txt

sort1
real    0m0.101s
user    0m0.036s
sys     0m0.031s

sort2
real    0m0.037s
user    0m0.002s
sys     0m0.026s

sort3
real    0m0.049s
user    0m0.020s
sys     0m0.026s

///random50000.txt

sort1
real    0m7.359s
user    0m5.091s
sys     0m0.260s

sort2
real    0m0.809s
user    0m0.029s
sys     0m0.229s

sort3
real    0m2.710s
user    0m1.793s
sys     0m0.253s

///reversed5000.txt

sort1
real    0m0.075s
user    0m0.046s
sys     0m0.025s

sort2
real    0m0.035s
user    0m0.002s
sys     0m0.028s

sort3
real    0m0.059s
user    0m0.019s
sys     0m0.031s

///reversed50000.txt

sort1
real    0m6.003s
user    0m4.479s
sys     0m0.244s

sort2
real    0m1.346s
user    0m0.023s
sys     0m0.230s

sort3
real    0m2.925s
user    0m2.056s
sys     0m0.225s

///sorted5000.txt

sort1
real    0m0.035s
user    0m0.004s
sys     0m0.024s

sort2
real    0m0.038s
user    0m0.001s
sys     0m0.027s

sort3
real    0m0.050s
user    0m0.020s
sys     0m0.027s

///sorted50000.txt

sort1
real    0m0.714s
user    0m0.028s
sys     0m0.209s

sort2
real    0m1.866s
user    0m0.021s
sys     0m0.228s

sort3
real    0m2.849s
user    0m1.716s
sys     0m0.200s

///sorted10000

sort1
real    0m0.069s
user    0m0.009s
sys     0m0.046

sort2
real    0m0.072s
user    0m0.002s
sys     0m0.054s

sort3
real    0m0.119s
user    0m0.072s
sys     0m0.044s

